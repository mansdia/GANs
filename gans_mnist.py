# -*- coding: utf-8 -*-
"""GANs_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SCMJlMsokRVhqGfL8F7x2WE3tuqUpFI5

#Generative Adverserial Networks(GANs)

In this notebook, we implemented GANs on MNIST dataset
"""

#impporting the required packages
import torch
from torch import nn
from torchvision import transforms
from torchvision.datasets import MNIST 
from torchvision.utils import make_grid
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

"""The generative adverserial networks train simustaneously 2 models:
- The  Generative model which produce fake images to fool the discriminator
- The Discriminator model which predict the probability of an input image to be fake or real
"""

# We firstly make the  generator. It is composed of 
# stack of non linear models
# The gen_block function creates the sequences to be repeated
def gen_block(input_dim, output_dim):
    return nn.Sequential(
        nn.Linear(input_dim, output_dim),
        nn.BatchNorm1d(output_dim),
        nn.ReLU(inplace=True)
    )
# these blocks are the elementary pieces of the generator class
class Generator(nn.Module):
    def __init__(self, noise_vect_dim=64, im_dim=784, hidden_dim=128):
        super(Generator, self).__init__()
        self.gen = nn.Sequential(
            gen_block(noise_vect_dim, hidden_dim),
            gen_block(hidden_dim, hidden_dim * 2),
            gen_block(hidden_dim * 2, hidden_dim * 4),
            gen_block(hidden_dim * 4, hidden_dim * 8),
            nn.Linear(hidden_dim * 8, im_dim),
            nn.Sigmoid()
        )
    def forward(self, noise):
        return self.gen(noise)

# In order to make sure we have different output at each generation, we imput random noise 
# We take the random noise to follow the normal distribution
def make_noise_vector(n_samples, noise_vect_dim, device='cpu'):
    return torch.randn(n_samples, noise_vect_dim, device=device)

# We create the discriminator with similar process as the generator

def disc_block(input_dim, output_dim):
    return nn.Sequential(
        nn.Linear(input_dim, output_dim),
        nn.LeakyReLU(0.2)
    )

class Discriminator(nn.Module):
    def __init__(self, im_dim=784, hidden_dim=128):
        super(Discriminator, self).__init__()
        self.disc = nn.Sequential(
            disc_block(im_dim, hidden_dim * 4),
            disc_block(hidden_dim * 4, hidden_dim * 2),
            disc_block(hidden_dim * 2, hidden_dim),
            nn.Linear(hidden_dim, 1)
        )

    def forward(self, image):
        return self.disc(image)

# Let's set some hyperparameters for the training process
criterion = nn.BCEWithLogitsLoss()
n_epochs = 250
noise_vect_dim = 64
display_step = 300
batch_size = 128
lr = 0.00001

# Let's import the dataset we are going to work with
dataloader = DataLoader(
    MNIST('.', download=True, transform=transforms.ToTensor()),
    batch_size=batch_size,
    shuffle=True)

# Instantiation of the Generator and the Discriminator

device = 'cuda'
gen = Generator(noise_vect_dim).to(device)
gen_opt = torch.optim.Adam(gen.parameters(), lr=lr)
disc = Discriminator().to(device) 
disc_opt = torch.optim.Adam(disc.parameters(), lr=lr)

"""Each of the model will have his own loss function"""

# function to compute the loss of the discriminator
def compute_disc_loss(gen, disc, criterion, real_images, nber_images, z_dim, device):
    noise_vector = make_noise_vector(nber_images, z_dim, device)
    fake_images = gen(noise_vector)
    disc_pred_FI = disc(fake_images.detach())
    disc_pred_FI = disc_pred_FI.view(-1)
    disc_loss_FI = criterion(disc_pred_FI, torch.zeros_like(disc_pred_FI))
    disc_pred_RI = disc(real_images)
    disc_pred_RI = disc_pred_RI.view(-1)
    disc_loss_RI = criterion(disc_pred_RI, torch.ones_like(disc_pred_RI))
    disc_loss = disc_loss_FI + disc_loss_RI
    return disc_loss

# Function to ompute the loss the generator
def compute_gen_loss(gen, disc, criterion, nber_images, noise_vector_dim, device):
    noise_vector = make_noise_vector(num_images, noise_vector_dim, device)
    fake_images = gen(noise_vector)
    disc_pred_FI = disc(fake_images)
    gen_loss = criterion(disc_pred_FI, torch.ones_like(disc_pred_FI))
    return gen_loss

#Function to plot the images
def plot_images(image_tensor, num_images=25, size=(1, 28, 28)):
    image_unflat = image_tensor.detach().cpu().view(-1, *size)
    image_grid = make_grid(image_unflat[:num_images], nrow=5)
    plt.imshow(image_grid.permute(1, 2, 0).squeeze())
    plt.show()
    
# Training loop

step_compt = 0
mean_generator_loss = 0
mean_generator_losses = []
mean_discriminator_loss = 0
mean_discriminator_losses = []
num_images = batch_size

for epoch in range(n_epochs):

    for real_images, _ in dataloader:
        cur_batch_size = len(real_images)
        real_images = real_images.view(cur_batch_size, -1).to(device)
        disc_opt.zero_grad()
        disc_loss = compute_disc_loss(gen, disc, criterion, real_images, cur_batch_size, noise_vect_dim, device)
        disc_loss.backward(retain_graph=True)
        disc_opt.step()

        gen_opt.zero_grad()
        gen_loss = compute_gen_loss(gen, disc, criterion, num_images, noise_vect_dim, device)
        gen_loss.backward(retain_graph=True)
        gen_opt.step()
        
        mean_discriminator_loss += disc_loss.item() / display_step
        mean_generator_loss += gen_loss.item() / display_step
      
        

        if step_compt % display_step == 0 and step_compt > 0:
            print(f"Epoch {epoch}, step {step_compt}: Generator loss: {mean_generator_loss}, discriminator loss: {mean_discriminator_loss}")
            fake_noise = make_noise_vector(cur_batch_size, noise_vect_dim, device=device)
            fake = gen(fake_noise)
            plot_images(fake)
            plot_images(real_images)
            mean_generator_loss = 0
            mean_discriminator_loss = 0
        step_compt += 1
    mean_discriminator_losses.append(mean_discriminator_loss)    
    mean_generator_losses.append(mean_generator_loss)

plt.plot( mean_generator_losses, 'r')
plt.legend(['Generator Loss'])
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.show();

plt.plot(mean_discriminator_losses, 'b-')
plt.legend(['Discriminator Loss'])
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.show();



